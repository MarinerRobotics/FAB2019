// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/ClawPivotor.h"
#include "Commands/ClawWithJoy.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

ClawPivotor::ClawPivotor() : frc::Subsystem("ClawPivotor") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    sparkyClawPivotor.reset(new frc::Spark(1));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void ClawPivotor::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    SetDefaultCommand(new ClawWithJoy());
}

void ClawPivotor::Periodic() {
    // Put code here to be run every loop

}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.
void ClawPivotor::JoyClaw(){ 
     double clawControl = -1*Robot::oi->getJoystick2()->GetRawAxis(5);
     
     sparkyClawPivotor->Set(clawControl); // 1/2 speed
}

void ClawPivotor::ClawUp(){
	sparkyClawPivotor->Set(-0.5);
}
void ClawPivotor::ClawDown(){
	sparkyClawPivotor->Set(0.5);
}
void ClawPivotor::Stop(){
	sparkyClawPivotor->StopMotor();
}
/** @return 10% deadband */
double ClawPivotor::DB(double axisVal){
    if (axisVal < -0.05)
        return axisVal;
    if (axisVal > +0.1)
        return axisVal;
    return 0;
}