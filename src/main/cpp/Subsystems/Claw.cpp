// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Claw.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Claw::Claw() : frc::Subsystem("Claw") {
    sparkyClaw.reset(new rev::CANSparkMax(5, rev::CANSparkMax::MotorType::kBrushless));
    encody.reset(new rev::CANEncoder(*sparkyClaw));
    P, I, D = 0;
    error, setpoint, rcw = 0;
    integral, derivative, previous_error = 0.0;
}

void Claw::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Claw::Periodic() {
    // Put code here to be run every loop

}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

 void Claw::setSetPoint(int setpoint){
    this->setpoint = setpoint;
}

void Claw::PID(){
    error = setpoint - encody->GetPosition(); // Error = Target - Actual
    integral += (error*.02); // Integral is increased by the error*time (which is .02 seconds using normal IterativeRobot)
    derivative = (error - previous_error) / .02;
    rcw = P*error + I*integral + D*derivative;
}

void Claw::OpenClaw(){
    setSetPoint(200);
    PID();
    sparkyClaw->Set(rcw);
}
void Claw::CloseClaw(){
    setSetPoint(0);
    PID();
    sparkyClaw->Set(rcw);
}
void Claw::Stop(){
    sparkyClaw->Set(0.0);
}
