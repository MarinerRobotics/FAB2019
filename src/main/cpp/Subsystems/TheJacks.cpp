// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/TheJacks.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

TheJacks::TheJacks() : frc::Subsystem("TheJacks") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    cANSparkMAXJacksBack.reset(new rev::CANSparkMax(7, rev::CANSparkMax::MotorType::kBrushless));
    cANSparkMAXJacksFront.reset(new rev::CANSparkMax(6, rev::CANSparkMax::MotorType::kBrushless));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    cANSparkMAXJacksBack->SetInverted(true);
    backJack_encoder = cANSparkMAXJacksBack->GetEncoder();
    frontJack_encoder = cANSparkMAXJacksFront->GetEncoder();

}

void TheJacks::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void TheJacks::Periodic() {
    // Put code here to be run every loop

}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.
void TheJacks::RaiseJacksInBack(){
    frc::SmartDashboard::PutNumber("Back Jacks Encoder Pos", backJack_encoder.GetPosition());
    double backJacksPos = backJack_encoder.GetPosition();
    if (backJacksPos > 125){
        cANSparkMAXJacksBack->SetClosedLoopRampRate(0);
        StopBack();
        frc::SmartDashboard::PutNumber("Back Jacks Limit", 4);
    }
    else{
        cANSparkMAXJacksBack->SetClosedLoopRampRate(.3);
        cANSparkMAXJacksBack->Set(0.5);
        frc::SmartDashboard::PutNumber("Back Jacks Limit", 3);
    }
}
void TheJacks::RaiseJacksInBackSlow(){
    frc::SmartDashboard::PutNumber("Back Jacks Encoder Pos", backJack_encoder.GetPosition());
    double backJacksPos = backJack_encoder.GetPosition();
    if (backJacksPos > 125){
        cANSparkMAXJacksBack->SetClosedLoopRampRate(0);
        StopBack();
        frc::SmartDashboard::PutNumber("Back Jacks Limit", 4);
    }
    else{
        cANSparkMAXJacksBack->SetClosedLoopRampRate(.3);
        cANSparkMAXJacksBack->Set(0.25);
        frc::SmartDashboard::PutNumber("Back Jacks Limit", 3);
    }
}
void TheJacks::LowerJacksInBack(){
    double backJacksPos = backJack_encoder.GetPosition();
    frc::SmartDashboard::PutNumber("Back Jacks Encoder Pos", backJack_encoder.GetPosition());
     if (backJacksPos > 1){
         cANSparkMAXJacksBack->SetClosedLoopRampRate(.3);
        cANSparkMAXJacksBack->Set(-0.5);
        frc::SmartDashboard::PutNumber("Back Jacks Limit", 0);
    }
    else {
        cANSparkMAXJacksBack->SetClosedLoopRampRate(0);
        StopBack();
        frc::SmartDashboard::PutNumber("Back Jacks Limit", 1);
    
    }
}
void TheJacks::RaiseJacksInFront(){
    frc::SmartDashboard::PutNumber("Front Jacks Encoder Pos", frontJack_encoder.GetPosition());
    double frontJacksPos = frontJack_encoder.GetPosition();
    if (frontJacksPos > 125){
        cANSparkMAXJacksFront->SetClosedLoopRampRate(0);
        StopFront();
        frc::SmartDashboard::PutNumber("Front Jacks Limit", 4);
    }
    else{
        cANSparkMAXJacksFront->SetClosedLoopRampRate(.3);
        cANSparkMAXJacksFront->Set(0.5);
        frc::SmartDashboard::PutNumber("Front Jacks Limit", 3);
    }
}
void TheJacks::RaiseJacksInFrontSlow(){
    frc::SmartDashboard::PutNumber("Front Jacks Encoder Pos", frontJack_encoder.GetPosition());
    double frontJacksPos = frontJack_encoder.GetPosition();
    if (frontJacksPos > 125){
        cANSparkMAXJacksFront->SetClosedLoopRampRate(0);
        StopFront();
        frc::SmartDashboard::PutNumber("Front Jacks Limit", 4);
    }
    else{
        cANSparkMAXJacksFront->SetClosedLoopRampRate(.3);
        cANSparkMAXJacksFront->Set(0.25);
        frc::SmartDashboard::PutNumber("Front Jacks Limit", 3);
    }
}
void TheJacks::RaiseBoth(){
    double frontJacksPos = frontJack_encoder.GetPosition();
    double backJacksPos = backJack_encoder.GetPosition();
    if (frontJacksPos > backJacksPos){
        RaiseJacksInFrontSlow();
       //StopFront();
        RaiseJacksInBack();
    }
    else if (backJacksPos > frontJacksPos){
        RaiseJacksInBackSlow();
       //StopBack();
        RaiseJacksInFront();
    }
    else {
    RaiseJacksInFront();
    RaiseJacksInBack();
    }
}
void TheJacks::LowerBoth(){
    LowerJacksInFront();
    LowerJacksInBack();
}
void TheJacks::LowerJacksInFront(){
    frc::SmartDashboard::PutNumber("Front Jacks Encoder Pos", frontJack_encoder.GetPosition());
    double frontJacksPos = frontJack_encoder.GetPosition();
    if (frontJacksPos > 1){
        cANSparkMAXJacksFront->SetClosedLoopRampRate(.3);
        cANSparkMAXJacksFront->Set(-0.5);
        frc::SmartDashboard::PutNumber("Front Jacks Limit", 0);
    }
    else {
        cANSparkMAXJacksFront->SetClosedLoopRampRate(0);
        //cANSparkMAXJacksFront->Set(-0.2);
        StopFront();
        frc::SmartDashboard::PutNumber("Front Jacks Limit", 1);
    }
}

void TheJacks::Stop(){
    cANSparkMAXJacksBack->StopMotor();
    cANSparkMAXJacksFront->StopMotor();
}
void TheJacks::StopBack(){
    cANSparkMAXJacksBack->StopMotor();
}
void TheJacks::StopFront(){
    cANSparkMAXJacksFront->StopMotor();
}