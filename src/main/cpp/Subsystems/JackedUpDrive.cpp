// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/JackedUpDrive.h"
#include "Commands/driveForwardJackedUp.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

JackedUpDrive::JackedUpDrive() : frc::Subsystem("JackedUpDrive") {
    //talonJackedUpDrive.reset(new frc::PWMTalonSRX(2));
    talonJackedUpDrive.reset(new frc::VictorSP(2));

    }

void JackedUpDrive::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveForwardJackedUp());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void JackedUpDrive::Periodic() {
    // Put code here to be run every loop

}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.
void JackedUpDrive::DriveForward(){ //Now has been changed to be the defualt command and drive with triggers
	double leftTrigger = Robot::oi->getJoystick1()->GetRawAxis(2);
    double rightTrigger =-1* Robot::oi->getJoystick1()->GetRawAxis(3);
    //talonJackedUpDrive->Set(0.4);

    double driveSpeed = leftTrigger + rightTrigger;
    talonJackedUpDrive->Set(DB(driveSpeed*2));
   // talonJackedUpDrive->StopMotor();
}
void JackedUpDrive::DriveBack(){
	talonJackedUpDrive->Set(-0.4);
}
void JackedUpDrive::Stop(){
	talonJackedUpDrive->StopMotor();
}
/** @return 10% deadband */
double JackedUpDrive::DB(double axisVal) {
    if (axisVal < -0.10)
        return axisVal;
    if (axisVal > +0.10)
        return axisVal;
    return 0;
}
