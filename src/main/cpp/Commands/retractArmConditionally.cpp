// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/retractArmConditionally.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

retractArmConditionally::retractArmConditionally(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void retractArmConditionally::Initialize() {
    
}

// Called repeatedly when this Command is scheduled to run
void retractArmConditionally::Execute() {
    //Robot::armExtender->ArmIn();
    
    double boomPos = Robot::boomer->GetBoomPos();
    frc::SmartDashboard::PutNumber("ARMBOOM", boomPos);
     double safeOverride = Robot::oi->getJoystick2()->GetRawAxis(2);
     if (safeOverride > 0.25){
     
     }
    else{
        if (boomPos > -5.5 ||(boomPos < -17.54 && boomPos > -120)){
        frc::SmartDashboard::PutString("cOMMAND", "ArmExtensionNotSafe");
            Robot::armExtender->ArmIn();
        }
        else{
            frc::SmartDashboard::PutString("cOMMAND", "ArmExtensionOk");
        } 
    }
}

// Make this return true when this Command no longer needs to run execute()
bool retractArmConditionally::IsFinished() {
   return false;
}

// Called once after isFinished returns true
void retractArmConditionally::End() {
    
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void retractArmConditionally::Interrupted() {
    
}
